diff -Nur rtk.orig/MD5 rtk/MD5
--- rtk.orig/MD5	2017-07-30 21:19:15.000000000 +0200
+++ rtk/MD5	2018-01-11 15:54:10.889847573 +0100
@@ -2,8 +2,8 @@
 8a7c05e59254850952bae39b520caea4 *NAMESPACE
 88fa1e53a3f34832952c8ff99ed9dc90 *R/RcppExports.R
 ac8f01039783305f88ae4c3074386e65 *R/collectorscurve.R
-0289aa9f40f0478932d51abc33935d92 *R/rarefaction.R
-297b301e240e3b64276f5259baa1fcd0 *R/rarefaction.plots.R
+e95fb3afacc34863aa92136bd3322316 *R/rarefaction.R
+1b06b84cb2a0eb121a684d3b0c9e60c1 *R/rarefaction.plots.R
 852a185ed0631153f463156d8ff39d8c *README.md
 670c65e0c28a41128ba36de09d55880a *build/partial.rdb
 c892775da2853ff87fd91baee2f823f6 *inst/CITATION
@@ -12,22 +12,23 @@
 bb2caeb58209266610c4811125c98db4 *man/plot.rarefaction.Rd
 c22af6156447189c73a4eddd44042d01 *man/rtk-package.Rd
 2830e45915e6786b9cbff6c5c91ca7f5 *man/rtk.Rd
-3b67f38e4520008747981f43d26a1477 *src/ClStr2Mat.cpp
+080c2e39ef0516b3fb9ddbd40327250c *src/ClStr2Mat.cpp
 4ce487d7ff54b9ed85c7b98cadb9b8f6 *src/ClStr2Mat.h
-352427db2cf77a24a7edf281dfe82685 *src/IO.cpp
-5a3907f205e778e554207b2264a9f31a *src/IO.h
-e71f1957798f7be4611c99395483fdd0 *src/Makevars
+49def259b755ea731d93f2ea774afddd *src/IO.cpp
+5b7614625beeaf67ce7189d95e0d0beb *src/IO.h
+419fe6da30b159624af8bc8b74bad9ca *src/Makevars
 e71f1957798f7be4611c99395483fdd0 *src/Makevars.win
 943a19b18c22eede019d6a6f73e1f06a *src/Math.cpp
 49976a0ec34f5c211808c435ccd657e6 *src/Math.h
-4eb9c004267899cf24983cd40ccf3bd9 *src/Matrix.cpp
-07d874dfe5b263650767a6e7f7cde59b *src/Matrix.h
-2b01f853c187b714c642f3e4025325f0 *src/RRare.cpp
-46f70dcce8cb1e1534a4b75fed681534 *src/RRare.h
+11f1392c68c162e238cc2923fa4bb7e4 *src/Matrix.cpp
+a48a835efda6d68e519f95f1eafe7ead *src/Matrix.h
+5a78edbfcbe9f8d269350d3988d4ef56 *src/RRare.cpp
+7ae92935706ae693f954f7ceb34aa6ee *src/RRare.h
 29f4397fccfed00156849ec4864b447c *src/RcppExports.cpp
-9fae42c8d399494fa520db19aeff39c3 *src/Rwrapper.cpp
+c5e483533e426ba2ab4a96310580e480 *src/Rwrapper.cpp
 2228e977ebea8966e27929f43e39cb67 *src/Rwrapper.h
 87b500a847bfc24bb180f640c8e9c856 *src/options.h
 e294c9697c8fc478306fe6d170e39ad7 *src/register.c
+907a334ad0572e78c6143b17de665728 *src/XorShift128Plus.h
 3e76de486ec3e1fc4e1649d1e5eeca76 *tests/testthat.R
 b66261c32e346e6eac94496b01f27233 *tests/testthat/test_rare.R
diff -Nur rtk.orig/R/rarefaction.plots.R rtk/R/rarefaction.plots.R
--- rtk.orig/R/rarefaction.plots.R	2017-04-24 18:33:30.000000000 +0200
+++ rtk/R/rarefaction.plots.R	2018-01-04 12:51:30.714725314 +0100
@@ -1,7 +1,7 @@
 
 plot.rtk <- function(x, div = c("richness"),  groups = NA, col = NULL, lty = 1, pch = NA, fit = "arrhenius", legend = TRUE, legend.pos = "topleft", log.dim = "", boxplot = FALSE, ...){
 
-  if(!div%in% c('richness', 'shannon', 'simpson', 'invsimpson', 'chao1', 'eveness')){
+  if(!div%in% c('richness')){
     stop(paste("Not a possible plotting option for div:", div))
   }
 
diff -Nur rtk.orig/R/rarefaction.R rtk/R/rarefaction.R
--- rtk.orig/R/rarefaction.R	2017-07-30 20:29:38.000000000 +0200
+++ rtk/R/rarefaction.R	2018-01-11 14:30:25.625227595 +0100
@@ -1,7 +1,7 @@
-r.median <- function(n, x){
+r.mean <- function(n, x){
   x1 <- unlist(sapply(x, function(x){x[[n]]}), F, F)
   x2 <- x1[!is.na(x1)]
-  return(median(x2))
+  return(mean(x2))
 }
 
 rare.status <- function(msg, verbose=TRUE){
@@ -10,7 +10,7 @@
   }
 }
 # this is the rarefy function
-rtk <- function(input, repeats = 10, depth = 0, ReturnMatrix = 0, margin = 2, verbose = FALSE, threads = 1, tmpdir = NULL ){
+rtk <- function(input, repeats = 10, depth = 0, ReturnMatrix = 0, margin = 2, verbose = FALSE, threads = 1, tmpdir = NULL, measures = c('richness') ){
 
 
     # pass 1:x to Cpp as colnames
@@ -111,10 +111,9 @@
           warning(paste(length(res$skipped), "samples where skipped because the depth was greater than the number of elements in the sample."))
         }
 
-        # calculate median for diversity measures
-        measures               <- c('richness', 'shannon', 'simpson', 'invsimpson', 'chao1', 'eveness')
-        res$div.median         <- lapply(measures, r.median, x=res$divvs)
-        names(res$div.median)  <- paste("median.", measures, sep = "")
+        # calculate mean for diversity measures
+        res$div.mean         <- lapply(measures, r.mean, x=res$divvs)
+        names(res$div.mean)  <- "mean.richness"
 
     return(res)
   })
diff -Nur rtk.orig/src/ClStr2Mat.cpp rtk/src/ClStr2Mat.cpp
--- rtk.orig/src/ClStr2Mat.cpp	2017-07-30 20:30:49.000000000 +0200
+++ rtk/src/ClStr2Mat.cpp	2018-01-09 16:07:48.054731676 +0100
@@ -97,7 +97,6 @@
 			repFound = true;
 		}
 
-		bool geneInAssembl(true);
 		pos = gene.find(sampleSeq);
 		string sample;
 		SmplOccurITmult smNum;
@@ -124,8 +123,6 @@
 				SmplSum[smplLocs[jj]] += abundance;
 				//mat->addCount(sample, CLidx, abundance);
 			}
-		} else {
-			geneInAssembl = false;
 		}
 	}
 	incl.close();
diff -Nur rtk.orig/src/IO.cpp rtk/src/IO.cpp
--- rtk.orig/src/IO.cpp	2017-07-30 20:30:49.000000000 +0200
+++ rtk/src/IO.cpp	2018-01-11 15:46:28.844296313 +0100
@@ -1,5 +1,6 @@
 #include "IO.h"
-std::mutex rarefyMutex;
+#include "XorShift128Plus.h"
+#include <omp.h>
 
 
 void lineCntOut(const string inF, const string outF, const string arg4){
@@ -60,8 +61,8 @@
     }
 }
 //****************************  smplVec::smplVec ***********
-smplVec::smplVec(const vector<mat_fl>& vec, const int nt) :IDs(0),totSum(0),
-    num_threads(nt), richness(-1), Shannon(-1.f){
+smplVec::smplVec(const vector<mat_fl>& vec) :IDs(0),totSum(0),
+    richness(-1) {
         double cumSum(0.f);
         for (uint i = 0; i < vec.size(); i++){
             cumSum += vec[i];
@@ -74,11 +75,11 @@
         //arr = (int*) malloc((int)cumSum * sizeof(int));
         //arr = new unsigned short[(int)cumSum];
         arr.resize((long)cumSum);
-        if (verbose){
 #ifdef notRpackage
+        if (verbose){
             cerr << "memory";
-#endif
         }
+#endif
         totSum = cumSum;
         long k(0); uint posInVec(-1);
         //numFeatures = 0;
@@ -99,14 +100,13 @@
         }
         posInVec++;
         numFeatures = posInVec;
-        if (verbose){
 #ifdef notRpackage
+        if (verbose){
             cerr << "..\n";
-#endif
         }
+#endif
     }
-smplVec::smplVec(const string inF, const int nt) :IDs(0),totSum(0), num_threads(nt),
-    richness(-1),Shannon(-1.f) {
+smplVec::smplVec(const string inF) :IDs(0),totSum(0), richness(-1) {
 
         vector<double> vec;
         ifstream in(inF.c_str());
@@ -152,88 +152,51 @@
     }
 
 
-void smplVec::rarefy(vector<double> depts, string ofile, int rep,
-        DivEsts* divs, std::vector<vector<rare_map>> & RareSample,
-        vector<string>& retCntsSampleName, string& skippedSample,
-        vector<vector<vector<uint>>>* abundInRow, vector<vector<vector<uint>>>* occuencesInRow,
-        int writes,bool write, bool fillret){
-    bool doShuffle = true;
-    long curIdx = 0;
-    long dep;
-    // resize divvs
-    divs->richness.resize(depts.size());
-    divs->shannon.resize(depts.size());
-    divs->simpson.resize(depts.size());
-    divs->invsimpson.resize(depts.size());
-    divs->chao1.resize(depts.size());
-    divs->eve.resize(depts.size());
-    
-    for(uint i = 0; i < depts.size(); i++){
-        dep = depts[i];
+void smplVec::rarefy(const vector<double> depths, const int rep, DivEsts* divs) {
 
-        if (dep > totSum){
-            skippedSample = divs->SampleName;
-            if (verbose){cout<<"skipped sample, because rowSums < depth \n";}
-            return;
-        }
-        //long curIdx=(long)totSum+1;
-        for (int curRep=0;curRep<rep;curRep++){
-            if(curIdx+dep >= (long) totSum || doShuffle == true){
-                shuffle_singl();	
-                curIdx = 0;
-                doShuffle = false;
-            }
+    const vector<double>::size_type numSamples = depths.size();
+    divs->richness.resize(numSamples);
 
+    #pragma omp parallel for schedule(dynamic) num_threads(10) shared(divs)
+    for (vector<double>::size_type i = 0; i < numSamples; i++) {
+        long sampleSize = depths[i];
 
-            //count up
-            vector<uint> cnts(numFeatures, 0);
-            for (long i=(0+curIdx);i<(dep+curIdx);i++){
-                cnts[arr[i]]++;
-            }
+        auto engine = XorShift64Star();
+        long offset = 0;
 
+        //cerr << "thread " << omp_get_thread_num() << " doing depth " << dep << endl;
 
-            curIdx += dep;
-            string t_out = ofile;
-            if (rep!=1){
-                std::ostringstream oss;
-                oss<<curRep;
-                t_out += "_" +oss.str();
-            }
-
-            if (curRep < writes && fillret) {
-                rare_map cntsMap;
-                // fill map:
-                for(uint i = 0; i < cnts.size(); i++){
-                    if(cnts[i] != 0){
-                        cntsMap.insert( std::make_pair(i, cnts[i]) );
-                    }
-                }
-                RareSample[i].push_back(cntsMap);
-                if(curRep == 0){
-                    retCntsSampleName[i] = divs->SampleName; // safe the sample name as well
-                }
+        long richnesses[rep];
+        vector<unsigned int> arr_tcopy = arr;
+        std::shuffle(std::begin(arr_tcopy), std::end(arr_tcopy), engine);
+
+        for (int curRep=0; curRep<rep; curRep++) {
+
+            if (offset+sampleSize >= (long) totSum) {
+                // randomize sampling frame
+                std::shuffle(std::begin(arr_tcopy), std::end(arr_tcopy), engine);
+                offset = 0;
             }
-            richness = 0;
-            divs->richness[i].push_back(this->getRichness(cnts));
-            vector<double> three = this->calc_div(cnts, 4);
-            divs->shannon[i].push_back(three[0]);
-            divs->simpson[i].push_back(three[1]);
-            divs->invsimpson[i].push_back(three[2]);
-            divs->chao1[i].push_back(this->calc_chao1(cnts,1));
-            divs->eve[i].push_back(this->calc_eveness(cnts));
-            richness = 0;
-
-            // save abundance for chao2 calculations later
-            rarefyMutex.lock();
-            for(uint im = 0; im < IDs.size(); im++){
-                //sparse convertions in swap mode
-                int id = std::stoi(IDs[im]);
-                if(cnts[im] != 0){
-                    abundInRow->at(i)[curRep][id]++;	
-                    occuencesInRow->at(i)[curRep][id] += cnts[im];
+
+            //count up
+            vector<bool> cnts(numFeatures, false);
+            for (long j=offset;j<offset+sampleSize;j++){
+                cnts[arr_tcopy[j]]=true;
+            }
+
+            // popcnt - number of features present in subsample
+            long rich = 0;
+            for (vector<uint>::size_type k = 0; k<numFeatures; k++) {
+                if (cnts[k]){
+                    ++rich;
                 }
             }
-            rarefyMutex.unlock();
+            richnesses[curRep] = rich;
+            offset += sampleSize;
+        }
+
+        for (int curRep=0;curRep<rep;curRep++){
+            divs->richness[i].emplace_back(richnesses[curRep]);
         }
     }
 }
@@ -252,172 +215,12 @@
 }
 
 
-double smplVec::calc_chao1(const vector<uint> & vec,int corrBias){
-    double Sobs((double)richness);
-    double singl(0); double doubl(0);
-    for (size_t i=0;i<vec.size();i++){
-        if (vec[i]==1){singl++;}
-        else if (vec[i]==2){doubl++;}
-    }
-    double est=0.0;
-    if (corrBias==0){
-        est = float( Sobs + (singl*singl)/(2*doubl) );
-    } else {
-        est = float( Sobs + (singl*(singl-1))/(2*(doubl+1)) );
-    }
-    /*if (conf.int){
-      N = apply(M,2,sum)
-      P = exp(-N/Sobs)
-      P1 =Sobs/(1-P)
-      P2 = 1.96*sqrt((Sobs*P)/(1-P))
-      low =  P1 - P2
-      idx = low<Sobs
-      low[idx] = Sobs[idx]
-      hi = P1 + P2
-      }*/
-    return (est);
-}
-
-
-vector<double> smplVec::calc_div(const vector<uint>& vec,int meth, float base){
-    double sum = 0;
-    for (size_t i=0; i<vec.size();i++){sum+=(double)vec[i];}
-    vector<double> x(vec.begin(),vec.end());
-    for (size_t i=0; i<x.size();i++){x[i] /= sum;}
-    bool doexp = false;
-    if (base <= 2.718284f && base >= 2.718280f){ // account for machine imprecission
-        doexp = true;
-    }
-    vector<double> H(3, 0.0); double H1(0.0), H2(0.0), H3(0.0);
-    if (meth == 1 || meth == 4){
-        if (doexp){
-            for (size_t i=0; i<x.size();i++){if (x[i]>0){H1 += x[i] * -log(x[i])  ;}}
-        } else {
-            float div = -log10(base);
-            for (size_t i = 0; i<x.size(); i++){ if (x[i]>0){ H1 += x[i] * log10(x[i]) / div; } }
-        }
-        Shannon = H1;
-    }
-    if (meth == 3 || meth == 4 || meth == 2) {
-        for (size_t i = 0; i<x.size(); i++){ H2 += x[i] * x[i]; }
-        H3 = H2;
-        H2 = 1 - H2;//simpson
-        H3 = 1 / H3; //invsimpson
-    }
-    //for (size_t i=0; i<x.size();i++){H += x[i];}
-    //if (meth == (int)2) {		H = 1 - H;	}else if (meth == 3)		H = 1/H;	}
-H[0] = H1; H[1] = H2; H[2] = H3;
-
-return(H);
-}
-double smplVec::calc_eveness(const vector<uint>& vec){
-    //double sha = calc_div(vec,1);
-    if (Shannon == -1.f){ vector<double> tm = calc_div(vec, 1); }
-    return(Shannon / log((double)richness));
-}
-
 // map versions of diversity fuctions:
 long smplVec::getRichness(rare_map& cnts){
     richness = cnts.size(); // set richness for other functions here
     return richness;
 }
 
-double smplVec::calc_chao1(rare_map& cnts,int corrBias){
-    double Sobs((double)richness);
-    double singl(0); double doubl(0);
-    float est(0);
-    typedef rare_map::iterator it;
-    for(it iterator = cnts.begin(); iterator != cnts.end(); iterator++) {
-        if (iterator->second == 1){
-            singl++;
-        }else if(iterator->second == 2){
-            doubl++;
-        }
-    }
-
-    /*
-       for (size_t i=0;i<vec.size();i++){
-       if (vec[i]==1){singl++;}
-       else if (vec[i]==2){doubl++;}
-       }
-       */
-    if (corrBias==0){
-        est = float( Sobs + (singl*singl)/(2*doubl) );
-    } else {
-        est = float( Sobs + (singl*(singl-1))/(2*(doubl+1)) );
-    }
-
-    return est;
-}
-
-
-vector<double> smplVec::calc_div(rare_map& cnts,int meth, float base){
-    double sum = 0;
-    vector<double> H(3, 0.0); double H1(0.0), H2(0.0), H3(0.0);
-    //for (size_t i=0; i<vec.size();i++){sum+=(double)vec[i];}
-    sum = std::accumulate(std::begin(cnts), std::end(cnts), 0, [] (int value, const rare_map::value_type& p){ return value + p.second; });
-
-    // copy counts into x
-    unordered_map <uint, double> x;
-    x.insert(cnts.begin(), cnts.end());
-    typedef unordered_map <uint, double>::iterator it;
-    for(it iterator = x.begin(); iterator != x.end(); iterator++) {
-        // iterator->first = key
-        iterator->second /= sum;
-    }
-    /*
-       vector<double> x(vec.begin(),vec.end());
-       for (size_t i=0; i<x.size();i++){x[i] /= sum;}*/
-
-
-    bool doexp = false;
-    if (base <= 2.718284f && base >= 2.718280f){ // account for machine imprecission
-        doexp = true;
-    }
-
-    if (meth == 1 || meth == 4){
-        if (doexp){
-            typedef unordered_map <uint, double>::iterator it;
-            for(it iterator = x.begin(); iterator != x.end(); iterator++) {
-                if (iterator->second>0){H1 += iterator->second * -log(iterator->second)  ;}
-            }
-            //for (size_t i=0; i<x.size();i++){if (x[i]>0){H1 += x[i] * -log(x[i])  ;}}
-        } else {
-            float div = -log10(base);
-            typedef unordered_map <uint, double>::iterator it;
-            for(it iterator = x.begin(); iterator != x.end(); iterator++) {
-                if (iterator->second>0){H1 += iterator->second * -log10(iterator->second)/ div;}
-            }
-            //for (size_t i = 0; i<x.size(); i++){ if (x[i]>0){ H1 += x[i] * log10(x[i]) / div; } }
-        }
-        Shannon = H1;
-    }
-
-    if (meth == 3 || meth == 4 || meth == 2) {
-        typedef unordered_map <uint, double>::iterator it;
-        for(it iterator = x.begin(); iterator != x.end(); iterator++) {
-            H2 += iterator->second * iterator->second;
-        }
-        //for (size_t i = 0; i<x.size(); i++){ H2 += x[i] * x[i]; }
-        H3 = H2;
-        H2 = 1 - H2;//simpson
-        H3 = 1 / H3; //invsimpson
-    }
-    H[0] = H1; H[1] = H2; H[2] = H3;
-
-    return(H);
-}
-double smplVec::calc_eveness(rare_map& cnts){
-    //double sha = calc_div(vec,1);
-    if (Shannon == -1.f){ vector<double> tm = calc_div(cnts, 1); }
-    return(Shannon / log((double)richness));
-}
-
-
-
-
-
-
 void smplVec::print2File(const vector<unsigned int>& cnts,const string t_out){
     richness=0;
     ofstream out(t_out.c_str());
@@ -538,43 +341,6 @@
         return -1; // Not found
 }
 
-
-
-/*
-void DivEsts::print2file(const string file){
-    if (richness.size()<1){return;}
-    ofstream out(file.c_str());
-    if (!out){
-#ifdef notRpackage
-        cerr << "Couldn't open diversity estimate file " << file << endl; std::exit(99);
-#endif
-    }
-    out<<"Richness\t"<<richness[0];
-    for (size_t i=1; i<richness.size();i++){
-        out << "\t"<<richness[i];
-    }
-    out<<"\nShannon\t"<<shannon[0];
-    for (size_t i=1; i<shannon.size();i++){
-        out << "\t"<<shannon[i];
-    }
-    out<<"\nSimpson\t"<<simpson[0];
-    for (size_t i=1; i<simpson.size();i++){
-        out << "\t"<<simpson[i];
-    }
-    out<<"\nInv. Simpson\t"<<invsimpson[0];
-    for (size_t i=1; i<invsimpson.size();i++){
-        out << "\t"<<invsimpson[i];
-    }
-    out<<"\nChao1\t"<<chao1[0];
-    for (size_t i=1; i<chao1.size();i++){
-        out << "\t"<<chao1[i];
-    }
-    out<<"\nEveness\t"<<eve[0];
-    for (size_t i=1; i<eve.size();i++){
-        out << "\t"<<eve[i];
-    }
-    out.close();
-}*/
 void printDivMat(const string outF, vector<DivEsts*>& inD, bool printDIV, options* opts){
 
     string outFmedian = outF + "median_alpha_diversity.tsv";
@@ -593,7 +359,7 @@
     out << "\n";
     out << "Smpl";
     for( uint di = 0; di < opts->depth.size(); di++){
-       out << "\tRichness\tShannon\tSimpson\tInv. Simpson\tChao1\tEveness";
+       out << "\tRichness";
     }
     out << "\n";
     for (size_t i = 0; i < inD.size(); i++){
@@ -607,11 +373,6 @@
         out << inD[i]->SampleName;
         for( uint di = 0; di < opts->depth.size(); di++){
             out << "\t" << getMedian(inD[i]->richness[di]) ;
-            out  << "\t"<< getMedian(inD[i]->shannon[di]);
-            out  << "\t"<< getMedian(inD[i]->simpson[di]);
-            out  << "\t"<< getMedian(inD[i]->invsimpson[di]) ;
-            out  << "\t"<< getMedian(inD[i]->chao1[di]) << "";
-            out  << "\t" << getMedian(inD[i]->eve[di]) << "";
         }
         out << "\n";
     }
@@ -622,11 +383,6 @@
         // open all files as streams
         vector<string> divNames;
         divNames.push_back("richness");
-        divNames.push_back("shannon");
-        divNames.push_back("simpson");
-        divNames.push_back("invsimpson");
-        divNames.push_back("chao1");
-        divNames.push_back("eve");
 
         vector<ofstream> outFs(divNames.size());
 
@@ -666,56 +422,6 @@
                 }
             }
             outFs[k] << '\n';
-
-            // shannon
-            k = 1;
-            outFs[k] << inD[i]->SampleName ;
-            for( uint di = 0; di < opts->depth.size(); di++){
-                for( uint j = 0; j < inD[i]->shannon[di].size(); j++){
-                    outFs[k] << "\t" << inD[i]->shannon[di][j] ;
-                }
-            }
-            outFs[k] << '\n';
-
-            // simpson
-            k = 2;
-            outFs[k] << inD[i]->SampleName ;
-            for( uint di = 0; di < opts->depth.size(); di++){
-                for( uint j = 0; j < inD[i]->simpson[di].size(); j++){
-                    outFs[k] << "\t" << inD[i]->simpson[di][j] ;
-                }
-            }
-            outFs[k] << '\n';
-
-            // invsimpson
-            k = 3;
-            outFs[k] << inD[i]->SampleName ;
-            for( uint di = 0; di < opts->depth.size(); di++){
-                for( uint j = 0; j < inD[i]->invsimpson[di].size(); j++){
-                    outFs[k] << "\t" << inD[i]->invsimpson[di][j] ;
-                }
-            }
-            outFs[k] << '\n';
-
-            // chao1
-            k = 4;
-            outFs[k] << inD[i]->SampleName ;
-            for( uint di = 0; di < opts->depth.size(); di++){
-                for( uint j = 0; j < inD[i]->chao1[di].size(); j++){
-                    outFs[k] << "\t" << inD[i]->chao1[di][j] ;
-                }
-            }
-            outFs[k] << '\n';
-
-            // eve
-            k = 5;
-            outFs[k] << inD[i]->SampleName ;
-            for( uint di = 0; di < opts->depth.size(); di++){
-                for( uint j = 0; j < inD[i]->chao1[di].size(); j++){
-                    outFs[k] << "\t" << inD[i]->eve[di][j] ;
-                }
-            }
-            outFs[k] << '\n';
         }
 
         // close streams
@@ -903,81 +609,7 @@
 }
 
 
-
-void computeChao2(std::vector<vector<mat_fl>>& chao2, vector<vector<vector<uint>>>& abundInRow){
-    for(uint i = 0; i < abundInRow.size(); i++){
-        for(uint ii = 0; ii < abundInRow[i].size(); ii++){
-            // count No of species
-            float NoOfSpec = 0;
-            float singletons = 0;
-            float doubletons = 0;
-            for(uint j = 0; j < abundInRow[i][ii].size(); j++){
-                if(abundInRow[i][ii][j] != 0){
-                    NoOfSpec++;
-                }
-                if(abundInRow[i][ii][j] == 1){
-                    singletons++;
-                }else	if(abundInRow[i][ii][j] == 2){
-                    doubletons++;
-                }
-            }
-            // calc chao2
-            mat_fl tmpChao2 = 0.0;
-            if(doubletons != 0){
-                tmpChao2 = float(NoOfSpec + ((singletons*singletons)/(2*doubletons)));
-            }
-            chao2[i].push_back(tmpChao2);
-        }   
-    }
-}
-
-void computeCE(vector<vector<mat_fl>>& CE, vector<vector<vector<uint>>>& abundInRow){
-    // inspired by the ICE implementation in the R package fossil
-    // by Matthew Vavrek
-    // https://matthewvavrek.com/programs-and-code/fossil/
-    // ACE and IE use this functio, one with ror abundance the other with row presence data
-    int val;
-    for(uint i = 0; i < abundInRow.size(); i++){
-        for(uint ii = 0; ii < abundInRow[i].size(); ii++){
-            std::vector< int > abundOneToTen(10,0);
-            float nr = 0.0, sa = 0.0, sr = 0.0, f1 = 0.0, ca= 0.0,sumf= 0.0, g2a = 0.0;
-
-            for(uint j = 0; j < abundInRow[i].size(); j++){
-                val = abundInRow[i][ii][j];
-                if(val < 11 && val != 0){
-                    nr += val;
-                    sr++;
-                }else if(val > 10){
-                    sa++;
-                }
-                if(val == 1){
-                    f1 += 1;
-                }
-                if((val < 11) && (val > 0)){
-                    abundOneToTen[val-1]++;
-                }
-            }
-
-            for(uint j = 0; j < abundOneToTen.size(); j++){
-                sumf += abundOneToTen[j] * (j+1);
-            }
-            ca = 1 - (f1)/(nr);
-            g2a = (sr/ca) * (sumf/(nr * (nr - 1))) - 1;
-            if(g2a < 0){
-                g2a = 0;
-            }
-
-            if(ca != 0){
-                mat_fl tmp = sa + sr/ca + (f1/ca) * g2a;
-                CE[i].push_back(tmp);
-            }else{
-                CE[i].push_back(0);// or compute chao2 here, why would i do that?
-            }
-        }   }
-}
-
-
-void writeGlobalDiv(options* opts, vector<vector<mat_fl>>& ICE, vector<vector<mat_fl>>& ACE, vector<vector<mat_fl>>& chao2, string outF){
+void writeGlobalDiv(options* opts, string outF){
     ofstream out(outF.c_str());
     out << "depth";
 
@@ -998,26 +630,5 @@
     }    
     out << '\n';
 
-    out << "Chao2";                      
-    for(uint i = 0; i < chao2.size(); i++){
-        for(uint j = 0; j < chao2[i].size(); j++){
-            out << '\t' << chao2[i][j];
-        }                            
-    }
-    out << '\n';
-
-    out << "ICE";
-    for(uint i = 0; i < ICE.size(); i++){
-        for(uint j = 0; j < ICE.size(); j++){
-            out << '\t' << ICE[i][j];
-        }   }
-    out << '\n';
-
-    out << "ACE";
-    for(uint i = 0; i < ACE.size(); i++){
-        for(uint j = 0; j < ACE.size(); j++){
-            out << '\t' << ACE[i][j];
-        }    }
-    out << '\n';
     out.close();
 }
diff -Nur rtk.orig/src/IO.h rtk/src/IO.h
--- rtk.orig/src/IO.h	2017-07-30 20:30:49.000000000 +0200
+++ rtk/src/IO.h	2018-01-11 14:59:17.891239715 +0100
@@ -78,13 +78,11 @@
 
 class DivEsts{
 public:
-	DivEsts():richness(0),shannon(0),
-		simpson(0),invsimpson(0),chao1(0),eve(0){}
+	DivEsts():richness(0){}
 	~DivEsts(){}
 	//void print2file(const string);
 	//data vectors
 	vector<vector<long>> richness;
-	vector<vector<double>> shannon,simpson,invsimpson,chao1,eve;
 	string SampleName;
 	int depth;
 };
@@ -95,13 +93,12 @@
 
 class smplVec{
 public:
-	smplVec(const string, const int);
-	smplVec(const vector<mat_fl>&, const int);
+	smplVec(const string);
+	smplVec(const vector<mat_fl>&);
 	~smplVec(){
 		//delete[] arr;
 	}
-	void rarefy(vector<double> ,string o,int rep,DivEsts*, vector<vector<rare_map>>& RareSample,
-		vector<string>& retCntsSampleName, string& skippedSample, vector<vector<vector<uint>>>* ,vector<vector<vector<uint>>>* , int=0,bool=false, bool=false);
+	void rarefy(const vector<double>, const int rep, DivEsts*);
 	long getRichness(rare_map& cnts);
 	long getRichness(const vector<unsigned int>&);
 	//int maxSiz(){return vector<unsigned short>::max_size();}
@@ -112,15 +109,6 @@
 	//void shuffle();
 	void shuffle_singl();
 
-	//diversity indices
-	//method: 1=shannon, 2=simpson, 3=invsimpson
-	vector<double> calc_div(const vector<uint>& vec,int meth=1, float base=2.718282f);
-	vector <double> calc_div(rare_map& , int meth=1, float base=2.718282f);
-	double calc_chao1(const vector<uint> & vec,int corrBias=1);
-	double calc_chao1(rare_map& , int corrBias=1); //corrBias: 0/1
-	double calc_eveness(const vector<uint>& vec);
-	double calc_eveness(rare_map& );
-
 	void print2File(const vector<unsigned int>&,const string);
 	//unsigned short * arr;
 	vector<string> IDs;
@@ -128,18 +116,13 @@
 	double totSum;
 	vector<MyRNG> rng_P;
 	MyRNG rng;
-	int num_threads;
+	//int num_threads;
 	long richness;
-	double Shannon;
-	int numFeatures;
+	uint numFeatures;
 
 	//vector<float> vec;
 };
 
-void computeChao2(std::vector<vector<mat_fl>>& chao2, vector<vector<vector<uint>>>& abundInRow);
-// compute ace or ice, depending on input data
-void computeCE(vector<vector<mat_fl>>& CE, vector<vector<vector<uint>>>& abundInRow);
-
 
-void writeGlobalDiv(options* opts, vector<vector<mat_fl>>& ICE, vector<vector<mat_fl>>& ACE, vector<vector<mat_fl>>& chao2, string outF);
+void writeGlobalDiv(options* opts, string outF);
 //void writeGlobalDiv(vector<mat_fl>& ICE, vector<mat_fl>& ACE, vector<mat_fl>& chao2, string outF);
diff -Nur rtk.orig/src/Makevars rtk/src/Makevars
--- rtk.orig/src/Makevars	2017-07-30 20:30:49.000000000 +0200
+++ rtk/src/Makevars	2018-01-11 11:17:18.555744653 +0100
@@ -1,7 +1,2 @@
-## -*- mode: makefile; -*-
-
-#PKG_CXXFLAGS=-std=c++11
-#PKG_CXXFLAGS="-cflags"
-CC=g++
-CXX=g++
-CXX_STD=CXX11
+PKG_CXXFLAGS = $(SHLIB_OPENMP_CXXFLAGS) -Wall
+PKG_LIBS = $(SHLIB_OPENMP_CXXFLAGS)
diff -Nur rtk.orig/src/Matrix.cpp rtk/src/Matrix.cpp
--- rtk.orig/src/Matrix.cpp	2017-07-30 20:30:49.000000000 +0200
+++ rtk/src/Matrix.cpp	2018-01-09 16:08:41.991743683 +0100
@@ -1572,12 +1572,10 @@
 		stringstream ss;
 		ss << line;
 		int cnt2(-1);
-		int CurIdx(-1);
 		while (getline(ss,segments,'\t')) {
 			cnt2++;
 			if (cnt2 == -1){
 				//rowID = segments;
-				CurIdx = this->getIdx(segments);
 				continue;
 			}
 			mat_fl tmp =  atof(segments.c_str());
diff -Nur rtk.orig/src/Matrix.h rtk/src/Matrix.h
--- rtk.orig/src/Matrix.h	2017-07-30 20:30:49.000000000 +0200
+++ rtk/src/Matrix.h	2018-01-11 11:04:30.837357533 +0100
@@ -133,7 +133,7 @@
 	size_t smplNum(){ return colIDs.size(); }
 	int rowNum(){ return rowIDs.size(); }
 
-	smplVec* getSampleVec(uint which){ return new smplVec(mat[which],1); }
+	smplVec* getSampleVec(uint which){ return new smplVec(mat[which]); }
 	string getSampleName(uint which){ return colIDs[which]; }
 
 	int SmplNum() { return (int)mat.size(); }
diff -Nur rtk.orig/src/RRare.cpp rtk/src/RRare.cpp
--- rtk.orig/src/RRare.cpp	2017-07-30 20:30:49.000000000 +0200
+++ rtk/src/RRare.cpp	2018-01-11 11:06:29.472241562 +0100
@@ -21,11 +21,8 @@
     vector<vector<rare_map>> cntsMap(opts->depth.size());
     vector<string> cntsName(opts->depth.size());
     string skippedNames;
-    bool wrAtAll(opts->write > 0);
 
-    cur->rarefy(opts->depth, opts->output, opts->repeats,
-            div, cntsMap, cntsName, skippedNames, abundInRow, occuencesInRow,
-            opts->write, false, wrAtAll);
+    cur->rarefy(opts->depth, opts->repeats, div);
 
     // put everything in our nice return container
     rareStruct* tmpRS       = new rareStruct();
@@ -42,16 +39,14 @@
 
 rareStruct* calcDivRarVec(int i, vector<string> fileNames, DivEsts* div, options* opts,
         vector<vector<vector<uint>>>* abundInRow, vector<vector <vector<uint>>>* occuencesInRow){
-    smplVec* cur = new smplVec(fileNames[i],4);
+    smplVec* cur = new smplVec(fileNames[i]);
 
     std::vector<vector<uint>> cnts;
     vector<vector<rare_map>> cntsMap(opts->depth.size());
     vector<string> cntsName(opts->depth.size());
     string skippedNames;
-    bool wrAtAll(opts->write > 0);
-    cur->rarefy(opts->depth, opts->output, opts->repeats,
-            div, cntsMap, cntsName, skippedNames, abundInRow, occuencesInRow,
-            opts->write, false, wrAtAll);
+
+    cur->rarefy(opts->depth, opts->repeats, div);
 
     rareStruct* tmpRS       = new rareStruct();
     tmpRS->div              = div;
@@ -74,9 +69,6 @@
             std::vector<vector<vector<rare_map>>> &MaRare,
             std::vector<vector<string>>& cntsNames,
             std::vector<string>& skippedNames,
-            std::vector<vector<mat_fl>>& ACE,
-            std::vector<vector<mat_fl>>& ICE,
-            std::vector<vector<mat_fl>>& chao2,
             std::vector<string>& rowNames,
             bool transpose){
                 
@@ -199,9 +191,9 @@
 
 
     // compute chao2, ACE, ICE and write to file
-    computeChao2(chao2, abundInRow);
-    computeCE(ICE, abundInRow);
-    computeCE(ACE, occuencesInRow);
+    //computeChao2(chao2, abundInRow);
+    //computeCE(ICE, abundInRow);
+    //computeCE(ACE, occuencesInRow);
 
 
 }
@@ -296,14 +288,9 @@
 	std::vector<vector<vector<rare_map>>> &MaRare,
 	std::vector<vector<string>>& cntsNames,
 	std::vector<string>& skippedNames,
-	std::vector<vector<mat_fl>>& ACE,
-	std::vector<vector<mat_fl>>& ICE,
-	std::vector<vector<mat_fl>>& chao2,
 	std::vector<string>& rowNames,
 	bool transpose)
 {
-	// compatibility to main rare software
-	bool writeFiles = false;
 
 	MyRNG rng;
 
@@ -440,14 +427,14 @@
 		delete Mo;
 
 		// compute chao2, ACE, ICE and write to file
-		computeChao2(chao2, abundInRow);
-		computeCE(ICE, abundInRow);
-		computeCE(ACE, occuencesInRow);
+		//computeChao2(chao2, abundInRow);
+		//computeCE(ICE, abundInRow);
+		//computeCE(ACE, occuencesInRow);
 
 
 	}else if(mode == "swap"){
 		rareLowMem(opts, divvs, MaRare, cntsNames,
-            skippedNames, ACE, ICE, chao2, rowNames,
+            skippedNames, rowNames,
             transpose);
 	}
 
diff -Nur rtk.orig/src/RRare.h rtk/src/RRare.h
--- rtk.orig/src/RRare.h	2017-07-30 20:30:49.000000000 +0200
+++ rtk/src/RRare.h	2018-01-04 12:43:09.765325857 +0100
@@ -28,8 +28,5 @@
 	std::vector<vector<vector<rare_map>>> &MaRare,
 	std::vector<vector<string>>& cntsNames,
 	std::vector<string>& skippedNames,
-	std::vector<vector<mat_fl>>& ACE,
-	std::vector<vector<mat_fl>>& ICE,
-	std::vector<vector<mat_fl>>& chao2,
 	std::vector<string>& rowNames,
 	bool transpose);
diff -Nur rtk.orig/src/Rwrapper.cpp rtk/src/Rwrapper.cpp
--- rtk.orig/src/Rwrapper.cpp	2017-07-30 20:30:49.000000000 +0200
+++ rtk/src/Rwrapper.cpp	2018-01-11 11:18:12.629711104 +0100
@@ -39,12 +39,7 @@
 List createDivList(DivEsts * div, int di){
     List divLst         = List::create(
             Named("samplename",   div->SampleName),
-            Named("richness",     div->richness[di]),
-            Named("shannon",      div->shannon[di]),
-            Named("simpson",      div->simpson[di]),
-            Named("invsimpson",   div->invsimpson[di]),
-            Named("chao1",        div->chao1[di]),
-            Named("eveness",      div->eve[di]));
+            Named("richness",     div->richness[di]));
     return divLst;
 }
 
@@ -90,7 +85,7 @@
 
 
 
-List returnRList(options* opts, vector<DivEsts*>& divvs, vector<vector<mat_fl>>& ACE, vector<vector<mat_fl>>& ICE, vector<vector<mat_fl>>& chao2, std::vector<string> skippedSamples, std::vector<string>  cntsNam, std::vector<string> rowNames, bool transpose, vector< vector< vector< rare_map > >> MaRare, unsigned int di){
+List returnRList(options* opts, vector<DivEsts*>& divvs, std::vector<string> skippedSamples, std::vector<string>  cntsNam, std::vector<string> rowNames, bool transpose, vector< vector< vector< rare_map > >> MaRare, unsigned int di){
     std::list<Rcpp::List> majorLst;
 
     for(uint i = 0; i < divvs.size(); i++){
@@ -106,7 +101,7 @@
         if(verbose == true){
             Rcout << "Will now prepare rarefied matrices for R\n";
         }
-        for(int i=0; i < opts->write; i++){
+        for(uint i=0; i < opts->write; i++){
             if(MaRare[di][i].size() > 0){
                 IntegerMatrix RdfTmp 	= matrix2Mat(MaRare[di][i], cntsNam, rowNames, transpose);
                 RrarefyMatrices[i]		= RdfTmp;
@@ -121,15 +116,9 @@
         retMatDF 			= wrap(RrarefyMatrices);
         returnList			= List::create(	Named("divvs", majorLst),
                 Named("raremat",retMatDF),
-                Named("ICE", wrap(ICE)),
-                Named("ACE", wrap(ACE)),
-                Named("chao2", wrap(chao2)),
                 Named("skipped", wrap(skippedSamples)));
     }else{
         returnList			= List::create(Named("divvs", majorLst),
-                Named("ICE", wrap(ICE)),
-                Named("ACE", wrap(ACE)),
-                Named("chao2", wrap(chao2)),
                 Named("skipped", wrap(skippedSamples)));
     }
     return returnList;
@@ -198,11 +187,6 @@
     std::vector<string> rowNames;
     std::vector<string> skippedSamples;
 
-    // store chao etc.
-    vector<vector<mat_fl>> chao2(opts->depth.size());
-    vector<vector<mat_fl>> ICE(opts->depth.size());
-    vector<vector<mat_fl>> ACE(opts->depth.size());
-
     // check for user interrup
     Rcpp::checkUserInterrupt();
     if(verbose == true){
@@ -214,7 +198,7 @@
     rarefyMain( opts, mode,
             rmat, incolnames, inrownames ,
             divvs, MaRare, cntsNames,
-            skippedSamples, ACE, ICE, chao2,
+            skippedSamples,
             rowNames, transpose);
 
     // check for user interrup
@@ -230,7 +214,7 @@
     }
     List returnList;
     for(unsigned int di = 0; di < opts->depth.size(); di++){
-        returnList.push_back(returnRList(opts, divvs, ACE, ICE, chao2, skippedSamples, cntsNames[di], rowNames, transpose, MaRare, di));
+        returnList.push_back(returnRList(opts, divvs, skippedSamples, cntsNames[di], rowNames, transpose, MaRare, di));
     }
     if(verbose == true){
         Rcout << "All R objects were produced\n";
diff -Nur rtk.orig/src/XorShift128Plus.h rtk/src/XorShift128Plus.h
--- rtk.orig/src/XorShift128Plus.h	1970-01-01 01:00:00.000000000 +0100
+++ rtk/src/XorShift128Plus.h	2018-01-11 13:48:47.288035317 +0100
@@ -0,0 +1,57 @@
+
+// https://stackoverflow.com/questions/35358501/what-is-performance-wise-the-best-way-to-generate-random-bools
+
+#include <random>
+
+class XorShift128Plus {
+  public:
+    using result_type = uint64_t;
+
+    XorShift128Plus() {
+      std::random_device rd;
+      state[0] = rd();
+      state[1] = rd();
+    }
+
+    result_type operator()() {
+      auto x = state[0];
+      auto y = state[1];
+      state[0] = y;
+      x ^= x << 23;
+      state[1] = x ^ y ^ (x >> 17) ^ (y >> 26);
+      return state[1] + y;
+    }
+
+    uint64_t min() { return std::numeric_limits<result_type>::min(); }
+    uint64_t max() { return std::numeric_limits<result_type>::max(); }
+
+  private:
+    result_type state[2];
+};
+
+
+class XorShift64Star {
+  public:
+    using result_type = uint64_t;
+
+    XorShift64Star() {
+      std::random_device rd;
+      state = rd();
+    }
+
+    result_type operator()() {
+      auto x = state;
+      x ^= x >> 12; // a
+      x ^= x << 25; // b
+      x ^= x >> 27; // c
+      state = x;
+      return x * 0x2545F4914F6CDD1D;
+    }
+
+    uint64_t min() { return std::numeric_limits<result_type>::min(); }
+    uint64_t max() { return std::numeric_limits<result_type>::max(); }
+
+  private:
+    result_type state;
+};
+
